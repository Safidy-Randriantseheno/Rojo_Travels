openapi: 3.0.3
info:
  version: '1.0'
  title: Rojo Trans
  description: |
    _Programmatically connect to a computer programming [school](https://hei.school)._
    After [joining us](mailto:contact@hei.school),
    you can get an identification token from
    our [dev](https://dev-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=5s8cg50doahmu855rlc8fr6qmp&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-dev.hei.school%2Fwhoami)
    or [prod](https://prod-hei-admin.auth.eu-west-3.amazoncognito.com/oauth2/authorize?client_id=i8bg538jpfu6mqmqb61m26trd&response_type=token&scope=email+openid&redirect_uri=https%3A%2F%2Fapi-prod.hei.school%2Fwhoami)
    authentication service.
    Then, start playing with our system!

    The implementation of our API is [publicly disclosed](https://github.com/hei-school/hei-admin-api).
    You are welcome to try and compromise it. Happy hacking!

servers:
  - url: 'https://api-dev.hei.school'
  - url: 'https://api-prod.hei.school'
security:
  - BearerAuth: [ ]

paths:
  '/whoami':
    get:
      tags:
        - Security
      summary: Who am I? Tells you who you are.
      operationId: whoami
      responses:
        '200':
          description: Who you are
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Whoami'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  '/client':
    get:
      tags:
        - Clients
      summary: Get all clients
      operationId: getClients
      parameters:
        - name: page
          in: query
          schema:
            $ref: '#/components/schemas/Page'
        - name: page_size
          in: query
          schema:
            $ref: '#/components/schemas/PageSize'
        - name: ref
          in: query
          description: "Filter clients by ref, case is ignored"
          schema:
            type: string
        - name: first_name
          in: query
          description: "Filter clients by first name, case is ignored"
          schema:
            type: string
        - name: last_name
          in: query
          description: "Filter clients by last name, case is ignored"
          schema:
            type: string
      responses:
        '200':
          description: List of clients, ordered by ref.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Clients
      summary: Create new clients or update existing clients
      description: Update clients when `id` are provided, create them otherwise.
      operationId: createOrUpdateClients
      requestBody:
        description: Clienta to update
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Client'
      responses:
        '200':
          description: The created or updated clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  '/offres/{id}':
    get:
      tags:
        - Offre
      summary: Get offre by identifier
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      operationId: getOffreById
      responses:
        '200':
          description: The identified offre
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offre'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /offres:
    get:
      tags:
        - Offre
      summary: Get all offres
      operationId: getOffres
      parameters:
        - name: page
          in: query
          schema:
            $ref: '#/components/schemas/Page'
          description: Set value to 1 by default if null is provided
          required: false
        - name: page_size
          in: query
          description: Set value to 15 by default if null is provided
          schema:
            $ref: '#/components/schemas/PageSize'
      responses:
        '200':
          description: List of all offres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offre'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Offre
      summary: Crupdate offres
      description: Update offres when id are provided, create them otherwise.
      operationId: crupdateOffres
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateOffre'
      responses:
        '200':
          description: The crupdated courses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offre'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /Chauffeur:
    get:
      tags:
        - Users
      summary: Get all chauffeur
      operationId: getChauffeurs
      parameters:
        - name: page
          in: query
          schema:
            $ref: '#/components/schemas/Page'
        - name: page_size
          in: query
          schema:
            $ref: '#/components/schemas/PageSize'
        - name: ref
          in: query
          description: "Filter Chauffeur by ref, case is ignored"
          schema:
            type: string
        - name: first_name
          in: query
          description: "Filter Chauffeur by first name, case is ignored"
          schema:
            type: string
        - name: last_name
          in: query
          description: "Filter Chauffeur by last name, case is ignored"
          schema:
            type: string
      responses:
        '200':
          description: List of Chauffeur, ordered by ref.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chauffeur'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Users
      summary: Create new teachers or update existing teachers
      description: Update teachers when `id` are provided, create them otherwise.
      operationId: createOrUpdateTeachers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Chauffeur'
      responses:
        '200':
          description: The created or updated teachers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chauffeur'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /clients/{client_id}/offres:
    get:
      tags:
        - Users
      summary: Get a specific client offre
      parameters:
        - name: client_id
          in: path
          required: true
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/OffreStatus'
          description: By default, LINKED courses are provided.
      operationId: getStudentCoursesById
      responses:
        '200':
          description: The student courses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offre'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - Users
      summary: Link or unlink courses to a specific student
      parameters:
        - name: client_id
          in: path
          required: true
          schema:
            type: string
      operationId: updateStudentCourses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateClientOffre'
      responses:
        '200':
          description: The client updated offres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offre'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  '/managers/{id}':
    get:
      tags:
        - Users
      summary: Get manager by identifier
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      operationId: getManagerById
      responses:
        '200':
          description: The identified manager
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manager'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
  /managers:
    get:
      tags:
        - Users
      summary: Get all managers
      operationId: getManagers
      parameters:
        - name: page
          in: query
          schema:
            $ref: '#/components/schemas/Page'
        - name: page_size
          in: query
          schema:
            $ref: '#/components/schemas/PageSize'
      responses:
        '200':
          description: List of managers, ordered by ref.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Manager'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    '429':
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'
  schemas:
    Whoami:
      properties:
        id:
          type: string
        role:
          type: string
          enum:
            - CLIENT
            - CHAUFFEUR
            - MANAGER
        bearer:
          type: string
    User:
      properties:
        id:
          type: string
        ref:
          type: string
          example: Rakoto
        first_name:
          type: string
        last_name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F
        birth_date:
          type: string
          format: date
        address:
          type: string
        phone:
          type: string
        email:
          type: string
        entrance_datetime:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/EnableStatus'
    EnableStatus:
      type: string
      enum:
        - ENABLED
        - DISABLED
    Client:
      allOf:
        - $ref: '#/components/schemas/User'
    Chauffeur:
      allOf:
        - $ref: '#/components/schemas/User'
    Manager:
      allOf:
        - $ref: '#/components/schemas/User'
    OffreTemplate:
      type: object
      properties:
        id:
          type: string
        code:
          type: string
          example: Circuit
        name:
          type: string
          example: Descent de riviere
        frais:
          type: integer
        delay:
          type: integer
    CrupdateOffre:
      allOf:
        - $ref: '#/components/schemas/OffreTemplate'
      type: object
      properties:
        main_client_id:
          type: string
    OffreStatus:
      type: string
      enum:
        - LINKED
        - UNLINKED
    UpdateClientOffre:
      type: object
      properties:
        offre_id:
          type: string
        status:
          $ref: '#/components/schemas/OffreStatus'
    Offre:
      allOf:
        - $ref: '#/components/schemas/OffreTemplate'
      type: object

    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error